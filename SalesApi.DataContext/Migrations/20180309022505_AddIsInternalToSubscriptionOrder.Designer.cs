// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SalesApi.DataContext.Contexts;
using SalesApi.Shared.Enums;
using System;

namespace SalesApi.DataContext.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20180309022505_AddIsInternalToSubscriptionOrder")]
    partial class AddIsInternalToSubscriptionOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SalesApi.Models.Collective.CollectiveCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubAreaId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("No")
                        .IsUnique();

                    b.HasIndex("SubAreaId");

                    b.ToTable("CollectiveCustomers");
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectiveDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Initialized");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("CollectiveDays");
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectiveOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CollectiveCustomerId");

                    b.Property<int>("CollectiveProductSnapshotId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<int>("Gift");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyOrderId")
                        .HasMaxLength(20);

                    b.Property<int>("Order");

                    b.Property<int>("Ordered");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CollectiveCustomerId");

                    b.HasIndex("CollectiveProductSnapshotId");

                    b.HasIndex("Date", "CollectiveProductSnapshotId", "CollectiveCustomerId")
                        .IsUnique();

                    b.ToTable("CollectiveOrders");
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectivePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CollectiveCustomerId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductForCollectiveId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForCollectiveId");

                    b.HasIndex("CollectiveCustomerId", "ProductForCollectiveId")
                        .IsUnique();

                    b.ToTable("CollectivePrices");
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectiveProductSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(20);

                    b.Property<int>("CollectiveDayId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<decimal>("EquivalentTon")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyProductId")
                        .HasMaxLength(5);

                    b.Property<int>("MinOrderCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<int>("ProductForCollectiveId");

                    b.Property<int>("ProductUnit");

                    b.Property<int>("ShelfLife");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CollectiveDayId");

                    b.HasIndex("ProductForCollectiveId");

                    b.ToTable("CollectiveProductSnapshots");
                });

            modelBuilder.Entity("SalesApi.Models.Collective.ProductForCollective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MinOrderCount");

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductForCollectives");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubAreaId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("No")
                        .IsUnique();

                    b.HasIndex("SubAreaId");

                    b.ToTable("CountyAgents");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyAgentPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyAgentId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductForCountyId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForCountyId");

                    b.HasIndex("CountyAgentId", "ProductForCountyId")
                        .IsUnique();

                    b.ToTable("CountyAgentPrices");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Initialized");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("CountyDays");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyAgentId");

                    b.Property<int>("CountyProductSnapshotId");

                    b.Property<int?>("CountyPromotionEventId");

                    b.Property<int?>("CountyPromotionEventId1");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<int>("Gift");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyOrderId")
                        .HasMaxLength(20);

                    b.Property<int>("Order");

                    b.Property<int>("Ordered");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountyAgentId");

                    b.HasIndex("CountyProductSnapshotId");

                    b.HasIndex("CountyPromotionEventId");

                    b.HasIndex("CountyPromotionEventId1");

                    b.HasIndex("Date", "CountyProductSnapshotId", "CountyAgentId")
                        .IsUnique();

                    b.ToTable("CountyOrders");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyProductSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(20);

                    b.Property<int>("CountyDayId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<decimal>("EquivalentTon")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyProductId")
                        .HasMaxLength(5);

                    b.Property<int>("MinOrderCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<int>("ProductForCountyId");

                    b.Property<int>("ProductUnit");

                    b.Property<int>("ShelfLife");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountyDayId");

                    b.HasIndex("ProductForCountyId");

                    b.ToTable("CountyProductSnapshots");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyPromotionSeriesId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForCountyId");

                    b.Property<int>("PurchaseBase");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountyPromotionSeriesId");

                    b.HasIndex("ProductForCountyId", "Date")
                        .IsUnique();

                    b.ToTable("CountyPromotionEvents");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionEventBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BonusCount");

                    b.Property<int>("CountyPromotionEventId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForCountyId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountyPromotionEventId");

                    b.HasIndex("ProductForCountyId");

                    b.ToTable("CountyPromotionEventBonuses");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionGiftOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyOrderId");

                    b.Property<int>("CountyPromotionEventBonusId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("PromotionGift");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountyPromotionEventBonusId");

                    b.HasIndex("CountyOrderId", "CountyPromotionEventBonusId")
                        .IsUnique();

                    b.ToTable("CountyPromotionGiftOrder");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("DateRepeatType");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForCountyId");

                    b.Property<int>("PurchaseBase");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Step");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForCountyId");

                    b.ToTable("CountyPromotionSeries");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionSeriesBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BonusCount");

                    b.Property<int>("CountyPromotionSeriesId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForCountyId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountyPromotionSeriesId");

                    b.HasIndex("ProductForCountyId");

                    b.ToTable("CountyPromotionSeriesBonuses");
                });

            modelBuilder.Entity("SalesApi.Models.County.ProductForCounty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MinOrderCount");

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductForCounties");
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("MallGroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubAreaId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MallGroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("No")
                        .IsUnique();

                    b.HasIndex("SubAreaId");

                    b.ToTable("MallCustomers");
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Initialized");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("MallDays");
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MallGroups");
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<int>("Gift");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyOrderId")
                        .HasMaxLength(20);

                    b.Property<int>("MallCustomerId");

                    b.Property<int>("MallProductSnapshotId");

                    b.Property<int>("Order");

                    b.Property<int>("Ordered");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MallCustomerId");

                    b.HasIndex("MallProductSnapshotId");

                    b.HasIndex("Date", "MallProductSnapshotId", "MallCustomerId")
                        .IsUnique();

                    b.ToTable("MallOrders");
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MallCustomerId");

                    b.Property<int>("Order");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductForMallId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForMallId");

                    b.HasIndex("MallCustomerId", "ProductForMallId")
                        .IsUnique();

                    b.ToTable("MallPrices");
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallProductSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<decimal>("EquivalentTon")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyProductId")
                        .HasMaxLength(5);

                    b.Property<int>("MallDayId");

                    b.Property<int>("MinOrderCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<int>("ProductForMallId");

                    b.Property<int>("ProductUnit");

                    b.Property<int>("ShelfLife");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MallDayId");

                    b.HasIndex("ProductForMallId");

                    b.ToTable("MallProductSnapshots");
                });

            modelBuilder.Entity("SalesApi.Models.Mall.ProductForMall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MinOrderCount");

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductForMalls");
                });

            modelBuilder.Entity("SalesApi.Models.Overall.SalesDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("SalesDays");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.ProductForRetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BoxPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<decimal>("InternalPrice")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MinOrderCount");

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductForRetails");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Initialized");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("RetailDays");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.Retailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubAreaId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("No")
                        .IsUnique();

                    b.HasIndex("SubAreaId");

                    b.ToTable("Retailers");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<int>("Gift");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyOrderId")
                        .HasMaxLength(20);

                    b.Property<int>("Order");

                    b.Property<int>("Ordered");

                    b.Property<int>("RetailProductSnapshotId");

                    b.Property<int?>("RetailPromotionEventId");

                    b.Property<int?>("RetailPromotionEventId1");

                    b.Property<int>("RetailerId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RetailProductSnapshotId");

                    b.HasIndex("RetailPromotionEventId");

                    b.HasIndex("RetailPromotionEventId1");

                    b.HasIndex("RetailerId");

                    b.HasIndex("Date", "RetailProductSnapshotId", "RetailerId")
                        .IsUnique();

                    b.ToTable("RetailOrders");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailProductSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(20);

                    b.Property<decimal>("BoxPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<decimal>("EquivalentTon")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("InternalPrice")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyProductId")
                        .HasMaxLength(5);

                    b.Property<int>("MinOrderCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<int>("ProductForRetailId");

                    b.Property<int>("ProductUnit");

                    b.Property<int>("RetailDayId");

                    b.Property<int>("ShelfLife");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForRetailId");

                    b.HasIndex("RetailDayId");

                    b.ToTable("RetailProductSnapshots");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForRetailId");

                    b.Property<int>("PurchaseBase");

                    b.Property<int>("RetailPromotionSeriesId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RetailPromotionSeriesId");

                    b.HasIndex("ProductForRetailId", "Date")
                        .IsUnique();

                    b.ToTable("RetailPromotionEvents");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionEventBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BonusCount");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForRetailId");

                    b.Property<int>("RetailPromotionEventId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForRetailId");

                    b.HasIndex("RetailPromotionEventId");

                    b.ToTable("RetailPromotionEventBonuses");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionGiftOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("PromotionGift");

                    b.Property<int>("RetailOrderId");

                    b.Property<int>("RetailPromotionEventBonusId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RetailPromotionEventBonusId");

                    b.HasIndex("RetailOrderId", "RetailPromotionEventBonusId")
                        .IsUnique();

                    b.ToTable("RetailPromotionGiftOrder");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("DateRepeatType");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForRetailId");

                    b.Property<int>("PurchaseBase");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Step");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForRetailId");

                    b.ToTable("RetailPromotionSeries");
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionSeriesBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BonusCount");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForRetailId");

                    b.Property<int>("RetailPromotionSeriesId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForRetailId");

                    b.HasIndex("RetailPromotionSeriesId");

                    b.ToTable("RetailPromotionSeriesBonuses");
                });

            modelBuilder.Entity("SalesApi.Models.Settings.DeliveryVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("DistributionGroupId");

                    b.Property<int?>("DistributionGroupId1");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyAreaId")
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<int>("SalesType");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("VehicleId");

                    b.Property<int?>("VehicleId1");

                    b.HasKey("Id");

                    b.HasIndex("DistributionGroupId");

                    b.HasIndex("DistributionGroupId1");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleId1");

                    b.HasIndex("SalesType", "VehicleId")
                        .IsUnique();

                    b.ToTable("DeliveryVehicles");
                });

            modelBuilder.Entity("SalesApi.Models.Settings.DistributionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("No");

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("No")
                        .IsUnique();

                    b.ToTable("DistributionGroups");
                });

            modelBuilder.Entity("SalesApi.Models.Settings.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<decimal>("EquivalentTon")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FullPinyin")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyProductId")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("ProductUnit");

                    b.Property<int>("ShelfLife");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SalesApi.Models.Settings.SubArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("DeliveryVehicleId");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacySubAreaId")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DeliveryVehicleId", "Name")
                        .IsUnique();

                    b.ToTable("SubAreas");
                });

            modelBuilder.Entity("SalesApi.Models.Settings.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Order");

                    b.Property<string>("Owner")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Milkman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("IdentityCardNo")
                        .HasMaxLength(50);

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyId")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubAreaId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Milkmen");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<bool>("IsInternal");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MilkmanId");

                    b.Property<int>("Month");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("PaidTime");

                    b.Property<int>("PresetDayBonus");

                    b.Property<int>("PresetDayCount");

                    b.Property<int>("PresetDayGift");

                    b.Property<int?>("SubscriptionMonthPromotionId");

                    b.Property<int>("SubscriptionProductSnapshotId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("MilkmanId");

                    b.HasIndex("SubscriptionMonthPromotionId");

                    b.HasIndex("SubscriptionProductSnapshotId");

                    b.ToTable("SubscriptionOrders");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrderBonusDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("SubscriptionMonthPromotionBonusDateId");

                    b.Property<int>("SubscriptionOrderId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionMonthPromotionBonusDateId");

                    b.HasIndex("SubscriptionOrderId", "SubscriptionMonthPromotionBonusDateId")
                        .IsUnique();

                    b.ToTable("SubscriptionOrderBonusDates");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrderDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("SubscriptionOrderId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionOrderId", "Date")
                        .IsUnique();

                    b.ToTable("SubscriptionOrderDates");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrderModifiedBonusDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date");

                    b.Property<int>("DayCount");

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("SubscriptionOrderId");

                    b.Property<int>("SubscriptionProductSnapshotId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionProductSnapshotId");

                    b.HasIndex("SubscriptionOrderId", "SubscriptionProductSnapshotId", "Date")
                        .IsUnique();

                    b.ToTable("SubscriptionOrderModifiedBonusDates");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.ProductForSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BoxPrice");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<decimal>("InternalPrice");

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MinOrderCount");

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductForSubscriptions");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("DayBase");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("EndDate");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Month");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("ProductForSubscriptionId");

                    b.Property<int>("PromotionType");

                    b.Property<int?>("StartDate");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ProductForSubscriptionId");

                    b.ToTable("SubscriptionMonthPromotions");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotionBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("PresetDayBonusCount");

                    b.Property<int>("ProductForSubscriptionId");

                    b.Property<int>("SubscriptionMonthPromotionId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForSubscriptionId");

                    b.HasIndex("SubscriptionMonthPromotionId", "ProductForSubscriptionId", "PresetDayBonusCount")
                        .IsUnique();

                    b.ToTable("SubscriptionMonthPromotionBonuses");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotionBonusDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DayBonusCount");

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("SubscriptionMonthPromotionBonusId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionMonthPromotionBonusId", "Date")
                        .IsUnique();

                    b.ToTable("SubscriptionMonthPromotionBonusDates");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.SubscriptionDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Deleted");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("SubscriptionDays");
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.SubscriptionProductSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(20);

                    b.Property<decimal>("BoxPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EquivalentBox");

                    b.Property<decimal>("EquivalentTon")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("InternalPrice")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<bool>("IsOrderByBox");

                    b.Property<string>("LastAction")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LegacyProductId")
                        .HasMaxLength(5);

                    b.Property<int>("MinOrderCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Order");

                    b.Property<int>("OrderDivisor");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<int>("ProductForSubscriptionId");

                    b.Property<int>("ProductUnit");

                    b.Property<int>("ShelfLife");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubscriptionDayId");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(7, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductForSubscriptionId");

                    b.HasIndex("SubscriptionDayId");

                    b.ToTable("SubscriptionProductSnapshots");
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectiveCustomer", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.SubArea", "SubArea")
                        .WithMany("CollectiveCustomers")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectiveOrder", b =>
                {
                    b.HasOne("SalesApi.Models.Collective.CollectiveCustomer", "CollectiveCustomer")
                        .WithMany()
                        .HasForeignKey("CollectiveCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Collective.CollectiveProductSnapshot", "CollectiveProductSnapshot")
                        .WithMany()
                        .HasForeignKey("CollectiveProductSnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectivePrice", b =>
                {
                    b.HasOne("SalesApi.Models.Collective.CollectiveCustomer", "CollectiveCustomer")
                        .WithMany("CollectivePrices")
                        .HasForeignKey("CollectiveCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Collective.ProductForCollective", "ProductForCollective")
                        .WithMany("CollectivePrices")
                        .HasForeignKey("ProductForCollectiveId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Collective.CollectiveProductSnapshot", b =>
                {
                    b.HasOne("SalesApi.Models.Collective.CollectiveDay", "CollectiveDay")
                        .WithMany("CollectiveProductSnapshots")
                        .HasForeignKey("CollectiveDayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Collective.ProductForCollective", "ProductForCollective")
                        .WithMany("CollectiveProductSnapshots")
                        .HasForeignKey("ProductForCollectiveId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Collective.ProductForCollective", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.Product", "Product")
                        .WithOne("ProductForCollective")
                        .HasForeignKey("SalesApi.Models.Collective.ProductForCollective", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyAgent", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.SubArea", "SubArea")
                        .WithMany("CountyAgents")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyAgentPrice", b =>
                {
                    b.HasOne("SalesApi.Models.County.CountyAgent", "CountyAgent")
                        .WithMany("CountyAgentPrices")
                        .HasForeignKey("CountyAgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.ProductForCounty", "ProductForCounty")
                        .WithMany("CountyAgentPrices")
                        .HasForeignKey("ProductForCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyOrder", b =>
                {
                    b.HasOne("SalesApi.Models.County.CountyAgent", "CountyAgent")
                        .WithMany()
                        .HasForeignKey("CountyAgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.CountyProductSnapshot", "CountyProductSnapshot")
                        .WithMany()
                        .HasForeignKey("CountyProductSnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.CountyPromotionEvent", "CountyPromotionEvent")
                        .WithMany()
                        .HasForeignKey("CountyPromotionEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.CountyPromotionEvent")
                        .WithMany("CountyOrders")
                        .HasForeignKey("CountyPromotionEventId1");
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyProductSnapshot", b =>
                {
                    b.HasOne("SalesApi.Models.County.CountyDay", "CountyDay")
                        .WithMany("CountyProductSnapshots")
                        .HasForeignKey("CountyDayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.ProductForCounty", "ProductForCounty")
                        .WithMany("CountyProductSnapshots")
                        .HasForeignKey("ProductForCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionEvent", b =>
                {
                    b.HasOne("SalesApi.Models.County.CountyPromotionSeries", "CountyPromotionSeries")
                        .WithMany("CountyPromotionEvents")
                        .HasForeignKey("CountyPromotionSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.ProductForCounty", "ProductForCounty")
                        .WithMany("CountyPromotionEvents")
                        .HasForeignKey("ProductForCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionEventBonus", b =>
                {
                    b.HasOne("SalesApi.Models.County.CountyPromotionEvent", "CountyPromotionEvent")
                        .WithMany("CountyPromotionEventBonuses")
                        .HasForeignKey("CountyPromotionEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.ProductForCounty", "ProductForCounty")
                        .WithMany("CountyPromotionEventBonuses")
                        .HasForeignKey("ProductForCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionGiftOrder", b =>
                {
                    b.HasOne("SalesApi.Models.County.CountyOrder", "CountyOrder")
                        .WithMany("CountyPromotionGiftOrders")
                        .HasForeignKey("CountyOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.CountyPromotionEventBonus", "CountyPromotionEventBonus")
                        .WithMany()
                        .HasForeignKey("CountyPromotionEventBonusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionSeries", b =>
                {
                    b.HasOne("SalesApi.Models.County.ProductForCounty", "ProductForCounty")
                        .WithMany("CountyPromotionSeries")
                        .HasForeignKey("ProductForCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.CountyPromotionSeriesBonus", b =>
                {
                    b.HasOne("SalesApi.Models.County.CountyPromotionSeries", "CountyPromotionSeries")
                        .WithMany("CountyPromotionSeriesBonuses")
                        .HasForeignKey("CountyPromotionSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.County.ProductForCounty", "ProductForCounty")
                        .WithMany("CountyPromotionSeriesBonuses")
                        .HasForeignKey("ProductForCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.County.ProductForCounty", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.Product", "Product")
                        .WithOne("ProductForCounty")
                        .HasForeignKey("SalesApi.Models.County.ProductForCounty", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallCustomer", b =>
                {
                    b.HasOne("SalesApi.Models.Mall.MallGroup", "MallGroup")
                        .WithMany("MallCustomers")
                        .HasForeignKey("MallGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Settings.SubArea", "SubArea")
                        .WithMany("MallCustomers")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallOrder", b =>
                {
                    b.HasOne("SalesApi.Models.Mall.MallCustomer", "MallCustomer")
                        .WithMany()
                        .HasForeignKey("MallCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Mall.MallProductSnapshot", "MallProductSnapshot")
                        .WithMany()
                        .HasForeignKey("MallProductSnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallPrice", b =>
                {
                    b.HasOne("SalesApi.Models.Mall.MallCustomer", "MallCustomer")
                        .WithMany("MallPrices")
                        .HasForeignKey("MallCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Mall.ProductForMall", "ProductForMall")
                        .WithMany("MallPrices")
                        .HasForeignKey("ProductForMallId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Mall.MallProductSnapshot", b =>
                {
                    b.HasOne("SalesApi.Models.Mall.MallDay", "MallDay")
                        .WithMany("MallProductSnapshots")
                        .HasForeignKey("MallDayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Mall.ProductForMall", "ProductForMall")
                        .WithMany("MallProductSnapshots")
                        .HasForeignKey("ProductForMallId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Mall.ProductForMall", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.Product", "Product")
                        .WithOne("ProductForMall")
                        .HasForeignKey("SalesApi.Models.Mall.ProductForMall", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.ProductForRetail", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.Product", "Product")
                        .WithOne("ProductForRetail")
                        .HasForeignKey("SalesApi.Models.Retail.ProductForRetail", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.Retailer", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.SubArea", "SubArea")
                        .WithMany("Retailers")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailOrder", b =>
                {
                    b.HasOne("SalesApi.Models.Retail.RetailProductSnapshot", "RetailProductSnapshot")
                        .WithMany()
                        .HasForeignKey("RetailProductSnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Retail.RetailPromotionEvent", "RetailPromotionEvent")
                        .WithMany()
                        .HasForeignKey("RetailPromotionEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Retail.RetailPromotionEvent")
                        .WithMany("RetailOrders")
                        .HasForeignKey("RetailPromotionEventId1");

                    b.HasOne("SalesApi.Models.Retail.Retailer", "Retailer")
                        .WithMany()
                        .HasForeignKey("RetailerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailProductSnapshot", b =>
                {
                    b.HasOne("SalesApi.Models.Retail.ProductForRetail", "ProductForRetail")
                        .WithMany("RetailProductSnapshots")
                        .HasForeignKey("ProductForRetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Retail.RetailDay", "RetailDay")
                        .WithMany("RetailProductSnapshots")
                        .HasForeignKey("RetailDayId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionEvent", b =>
                {
                    b.HasOne("SalesApi.Models.Retail.ProductForRetail", "ProductForRetail")
                        .WithMany("RetailPromotionEvents")
                        .HasForeignKey("ProductForRetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Retail.RetailPromotionSeries", "RetailPromotionSeries")
                        .WithMany("RetailPromotionEvents")
                        .HasForeignKey("RetailPromotionSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionEventBonus", b =>
                {
                    b.HasOne("SalesApi.Models.Retail.ProductForRetail", "ProductForRetail")
                        .WithMany("RetailPromotionEventBonuses")
                        .HasForeignKey("ProductForRetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Retail.RetailPromotionEvent", "RetailPromotionEvent")
                        .WithMany("RetailPromotionEventBonuses")
                        .HasForeignKey("RetailPromotionEventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionGiftOrder", b =>
                {
                    b.HasOne("SalesApi.Models.Retail.RetailOrder", "RetailOrder")
                        .WithMany("RetailPromotionGiftOrders")
                        .HasForeignKey("RetailOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Retail.RetailPromotionEventBonus", "RetailPromotionEventBonus")
                        .WithMany()
                        .HasForeignKey("RetailPromotionEventBonusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionSeries", b =>
                {
                    b.HasOne("SalesApi.Models.Retail.ProductForRetail", "ProductForRetail")
                        .WithMany("RetailPromotionSeries")
                        .HasForeignKey("ProductForRetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Retail.RetailPromotionSeriesBonus", b =>
                {
                    b.HasOne("SalesApi.Models.Retail.ProductForRetail", "ProductForRetail")
                        .WithMany("RetailPromotionSeriesBonuses")
                        .HasForeignKey("ProductForRetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Retail.RetailPromotionSeries", "RetailPromotionSeries")
                        .WithMany("RetailPromotionSeriesBonuses")
                        .HasForeignKey("RetailPromotionSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Settings.DeliveryVehicle", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.DistributionGroup", "DistributionGroup")
                        .WithMany()
                        .HasForeignKey("DistributionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Settings.DistributionGroup")
                        .WithMany("DeliveryVehicles")
                        .HasForeignKey("DistributionGroupId1");

                    b.HasOne("SalesApi.Models.Settings.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Settings.Vehicle")
                        .WithMany("DeliveryVehicles")
                        .HasForeignKey("VehicleId1");
                });

            modelBuilder.Entity("SalesApi.Models.Settings.SubArea", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.DeliveryVehicle", "DeliveryVehicle")
                        .WithMany("SubAreas")
                        .HasForeignKey("DeliveryVehicleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Milkman", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.SubArea", "SubArea")
                        .WithMany("Milkmen")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrder", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.Milkman", "Milkman")
                        .WithMany()
                        .HasForeignKey("MilkmanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotion", "SubscriptionMonthPromotion")
                        .WithMany()
                        .HasForeignKey("SubscriptionMonthPromotionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Subscription.SubscriptionProductSnapshot", "SubscriptionProductSnapshot")
                        .WithMany()
                        .HasForeignKey("SubscriptionProductSnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrderBonusDate", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotionBonusDate", "SubscriptionMonthPromotionBonusDate")
                        .WithMany()
                        .HasForeignKey("SubscriptionMonthPromotionBonusDateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Subscription.Order.SubscriptionOrder", "SubscriptionOrder")
                        .WithMany("SubscriptionOrderBonusDates")
                        .HasForeignKey("SubscriptionOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrderDate", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.Order.SubscriptionOrder", "SubscriptionOrder")
                        .WithMany("SubscriptionOrderDates")
                        .HasForeignKey("SubscriptionOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Order.SubscriptionOrderModifiedBonusDate", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.Order.SubscriptionOrder", "SubscriptionOrder")
                        .WithMany("SubscriptionOrderModifiedBonusDates")
                        .HasForeignKey("SubscriptionOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Subscription.SubscriptionProductSnapshot", "SubscriptionProductSnapshot")
                        .WithMany()
                        .HasForeignKey("SubscriptionProductSnapshotId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.ProductForSubscription", b =>
                {
                    b.HasOne("SalesApi.Models.Settings.Product", "Product")
                        .WithOne("ProductForSubscription")
                        .HasForeignKey("SalesApi.Models.Subscription.ProductForSubscription", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotion", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.ProductForSubscription", "ProductForSubscription")
                        .WithMany()
                        .HasForeignKey("ProductForSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotionBonus", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.ProductForSubscription", "ProductForSubscription")
                        .WithMany()
                        .HasForeignKey("ProductForSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotion", "SubscriptionMonthPromotion")
                        .WithMany("SubscriptionMonthPromotionBonuses")
                        .HasForeignKey("SubscriptionMonthPromotionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotionBonusDate", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.Promotion.SubscriptionMonthPromotionBonus", "SubscriptionMonthPromotionBonus")
                        .WithMany("SubscriptionMonthPromotionBonusDates")
                        .HasForeignKey("SubscriptionMonthPromotionBonusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SalesApi.Models.Subscription.SubscriptionProductSnapshot", b =>
                {
                    b.HasOne("SalesApi.Models.Subscription.ProductForSubscription", "ProductForSubscription")
                        .WithMany("SubscriptionProductSnapshots")
                        .HasForeignKey("ProductForSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SalesApi.Models.Subscription.SubscriptionDay", "SubscriptionDay")
                        .WithMany("SubscriptionProductSnapshots")
                        .HasForeignKey("SubscriptionDayId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
